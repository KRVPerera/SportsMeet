; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "MeetTracker"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Isuru Rathnayake and Rukshan Perera"
#define MyAppURL "https://github.com/KRVPerera/SportsMeet"
#define MyAppExeName "SportsMeet.exe"
#include <idp.iss>


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{4E125D40-C77B-4A39-8715-CA0BA30CA24B}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=..\LICENSE
InfoBeforeFile=InformationPre.txt
InfoAfterFile=InformationPost.txt
OutputBaseFilename=MeetSetup
Compression=lzma
SolidCompression=yes
MinVersion=0,6.0
VersionInfoVersion=0.9
VersionInfoCompany=ISURU RATHNAYAKA and RUKSHAN PERERA
VersionInfoCopyright=2019
VersionInfoProductName=MeetTracker
VersionInfoProductVersion=0.9

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "..\SportsMeet\bin\Release\System.Data.SQLite.dll"; DestDir: "{app}"
Source: "..\SportsMeet\bin\Release\Dapper.dll"; DestDir: "{app}"Source: "..\SportsMeet\bin\Release\NLog.dll"; DestDir: "{app}"
Source: "..\SportsMeet\bin\Release\NLog.xml"; DestDir: "{app}"
Source: "..\SportsMeet\bin\Release\x86\SQLite.Interop.dll"; DestDir: "{app}\x86"
Source: "..\SportsMeet\bin\Release\x64\SQLite.Interop.dll"; DestDir: "{app}\x64"
Source: "..\SportsMeet\bin\Release\x86\SQLite.Interop.dll"; DestDir: "{tmp}\MeetTracker\x86"
Source: "..\SportsMeet\bin\Release\x64\SQLite.Interop.dll"; DestDir: "{tmp}\MeetTracker\x64"
Source: "..\MeetDataBaseGen\bin\Release\dbup-core.dll"; DestDir: "{tmp}\MeetTracker"
Source: "..\MeetDataBaseGen\bin\Release\dbup-sqlite.dll"; DestDir: "{tmp}\MeetTracker"
Source: "..\SportsMeet\bin\Release\System.Data.SQLite.dll"; DestDir: "{tmp}\MeetTracker"
;Source: "dependencies\dotNetFx40_Full_x86_x64.exe"; DestDir: "{app}"; Flags: deleteafterinstall; Check: FrameworkIsNotInstalled; AfterInstall: InstallFramework

Source: "..\MeetDataBaseGen\bin\Release\MeetDataBaseGen.exe.config"; DestDir: "{tmp}\MeetTracker"; Flags: ignoreversion
Source: "..\MeetDataBaseGen\bin\Release\MeetDataBaseGen.exe"; DestDir: "{tmp}\MeetTracker"; Flags: ignoreversion deleteafterinstall; AfterInstall: CreateMeetDatabase
Source: "..\SportsMeet\bin\Release\SportsMeet.exe.config"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\SportsMeet\bin\Release\SportsMeet.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\SportsMeet\bin\Release\Dapper.Contrib.dll"; DestDir: "{app}"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\SportsMeet.exe"; IconIndex: 0
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"; IconFilename: "{app}\SportsMeet.exe"; IconIndex: 0
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\SportsMeet.exe"; IconIndex: 0; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\SportsMeet.exe"; IconIndex: 0; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[ThirdParty]
;https://stackoverflow.com/questions/20752882/how-can-i-install-net-framework-as-a-prerequisite-using-innosetup
UseRelativePaths=True

;Install https://code.google.com/archive/p/inno-download-plugin/
[Code]
procedure CreateMeetDatabase;
var
  ResultCode: Integer;
begin
  if not Exec(ExpandConstant('{tmp}\MeetTracker\MeetDataBaseGen.exe'), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
  begin
    { you can interact with the user that the installation failed }
    MsgBox('Database schema generation failed with code: ' + IntToStr(ResultCode) + '.',
      mbError, MB_OK);
  end;
  DelTree(ExpandConstant('{tmp}\MeetTracker'), True, True, True);
end;

// ref http://www.kynosarges.de/DotNetVersion.html
function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1'          .NET Framework 1.1
//    'v2.0'          .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//    'v4.5.2'        .NET Framework 4.5.2
//    'v4.6'          .NET Framework 4.6
//    'v4.6.1'        .NET Framework 4.6.1
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key, versionKey: string;
    install, release, serviceCount, versionRelease: cardinal;
    success: boolean;
begin
    versionKey := version;
    versionRelease := 0;

    // .NET 1.1 and 2.0 embed release number in version key
    if version = 'v1.1' then begin
        versionKey := 'v1.1.4322';
    end else if version = 'v2.0' then begin
        versionKey := 'v2.0.50727';
    end

    // .NET 4.5 and newer install as update to .NET 4.0 Full
    else if Pos('v4.', version) = 1 then begin
        versionKey := 'v4\Full';
        case version of
          'v4.5':   versionRelease := 378389;
          'v4.5.1': versionRelease := 378675; // or 378758 on Windows 8 and older
          'v4.5.2': versionRelease := 379893;
          'v4.6':   versionRelease := 393295; // or 393297 on Windows 8.1 and older
          'v4.6.1': versionRelease := 394254; // or 394271 on Windows 8.1 and older
        end;
    end;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + versionKey;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0 and newer use value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 and newer use additional value Release
    if versionRelease > 0 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= versionRelease);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;

// Without IDP Framework download simple message to the user asking to download
//function InitializeSetup(): Boolean;
//begin
//    if not IsDotNetDetected('v4\Full', 0) then begin
//        MsgBox('MeetTracker requires Microsoft .NET Framework 4.0.'#13#13
//            'Please use Windows Update to install this version,'#13
//            'and then re-run the MyApp setup program.', mbInformation, MB_OK);
//        result := false;
//    end else
//        result := true;
//end;

//             ref https://blogs.msdn.microsoft.com/davidrickard/2015/07/17/installing-net-framework-4-5-automatically-with-inno-setup/
// .NET Framework links : https://msdn.microsoft.com/en-US/library/ee942965%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396#redist
// .NET Framework 4.5  : http://go.microsoft.com/fwlink/?LinkId=225704
// .NET Framework 4.5.1: http://go.microsoft.com/fwlink/?LinkId=322115
// .NET Framework 4.5.2: http://go.microsoft.com/fwlink/?LinkId=397707
procedure InitializeWizard;
begin
    if not IsDotNetDetected('v4\Full', 0) then 
    //if IsDotNetDetected('v4\Full', 0) then 
    begin
        idpAddFile('http://go.microsoft.com/fwlink/?LinkId=397707', ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
        idpDownloadAfter(wpReady);
    end      
end;

procedure InstallFramework;
var
  StatusText: string;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := 'Installing .NET Framework 4.0. This might take a few minutes';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
    if not Exec(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'), '/passive /norestart','', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.', mbError, MB_OK);
    end;
  finally
    WizardForm.StatusLabel.Caption := StatusText;
    WizardForm.ProgressGauge.Style := npbstNormal;

    DeleteFile(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
  end;
end;
     
procedure CurStepChanged(CurStep: TSetupStep);
begin
  case CurStep of
    ssPostInstall:
      begin
        if not IsDotNetDetected('v4\Full', 0) then
        //if IsDotNetDetected('v4\Full', 0) then
        begin
          InstallFramework();
        end;
      end;
  end;
end;

procedure CurUninstallStepChanged (CurUninstallStep: TUninstallStep);
var
  mres : integer;
begin
  case CurUninstallStep of
    usPostUninstall:
      begin
        mres := MsgBox('Do you want to delete saved files?', mbConfirmation, MB_YESNO or MB_DEFBUTTON2)
        if mres = IDYES then
          DelTree(ExpandConstant('{userdocs}\MyApp'), True, True, True);
      end;  
  end;
end;